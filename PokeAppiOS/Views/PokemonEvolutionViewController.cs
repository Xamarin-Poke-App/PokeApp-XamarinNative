// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using PokeAppiOS.Views.PokemonDetail.Cells;
using UIKit;
using SharedCode.Model.Api;
using CoreAudioKit;
using CoreGraphics;
using SharedCode.Services;
using SharedCode.Controller;
using SharedCode.Util;
using SharedCode.Model.DB;
using System.Linq;

namespace PokeAppiOS.Views
{
	public partial class PokemonEvolutionViewController : UIViewController
	{  
        public EvolutionChainResponse EvolutionChainResponse;
        public PokemonLocal Pokemon;
        private UIColor _primaryColor;

        public PokemonEvolutionViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            pokemonEvolutionChainTableView.RegisterNibForCellReuse(EvolutionVariantTableViewCell.Nib, "EvolutionVariantTableViewCell");
            noEvolutionChainLabel.Hidden = true;

        }

        public void DrawEvolutionChain()
        {
            if (Pokemon == null) return;
            var primaryType = Pokemon.TypesArray.FirstOrDefault();
            _primaryColor = UIColor.FromName(primaryType);
            var count = EvolutionChainResponse?.GetListOfChains().Count ?? 0;
            if (count == 0)
            {
                pokemonEvolutionChainTableView.Hidden = true;
                noEvolutionChainLabel.Hidden = false;
                return;
            }
            pokemonEvolutionChainTableView.DataSource = new PokemonEvolutionViewControllerDataSource(this);
            pokemonEvolutionChainTableView.RowHeight = 120;
        }

        class PokemonEvolutionViewControllerDataSource : UITableViewDataSource
        {
            PokemonEvolutionViewController viewController;
            private List<List<ResultItem>> _evolutionChainPairList;

            public PokemonEvolutionViewControllerDataSource(PokemonEvolutionViewController viewController)
            {
                this.viewController = viewController;
                _evolutionChainPairList = viewController.EvolutionChainResponse?.GetListOfChains();
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                EvolutionVariantTableViewCell cell = (EvolutionVariantTableViewCell)tableView.DequeueReusableCell("EvolutionVariantTableViewCell");
                var list = viewController.EvolutionChainResponse.GetListOfChains();
                var evolutionChainPairList = list[indexPath.Row];
                if (viewController.EvolutionChainResponse != null)
                {
                    cell.PrimaryColor = viewController._primaryColor;
                    cell.EvolutionChainPairList = evolutionChainPairList;
                }
                return cell;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return _evolutionChainPairList?.Count ?? 0;
            }
        }
    }
}
